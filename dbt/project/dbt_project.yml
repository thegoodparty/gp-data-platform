# dbt_project.yml
name: "goodparty_data_catalog"
version: "1.0.0"
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: "default"

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target" # directory which will store compiled SQL files
clean-targets: # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"

# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In dbt, the default materialization for a model is a view. This means, when you run
# dbt run or dbt build, all of your models will be built as a view in your data platform.
# The configuration below will override this setting for models in the example folder to
# instead be materialized as tables. Any models you add to the root of the models folder will
# continue to be built as views. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.

models:
  goodparty_data_catalog:
    # set defaults for all .py models in this catalog
    +submission_method: serverless_cluster
    +create_notebook: True
    # Applies to all files under models/intermediate/
    intermediate:
      # set defaults for all .py models defined in this subfolder
      +submission_method: serverless_cluster
      +create_notebook: True
    # Applies to all files under models/mart/
    mart:
      +materialized: table
    staging:
      dbt_source:
        l2_s3:
          # There are about 300 static view models in this folder, so we need to add a tag to exclude them from recurring dbt jobs.
          +tags: ["staging", "dbt_source", "l2_s3"]

# Use the user's home folder for uploading python notebooks
# Shared folder use is deprecated due to governance concerns.
flags:
  use_user_folder_for_python: True
