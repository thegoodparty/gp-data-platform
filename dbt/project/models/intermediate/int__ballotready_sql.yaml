version: 2

models:
  - name: int__ballotready_position_to_place
    description: "Intermediate model that maps positions to places from the BallotReady API"
    columns:
      - name: position_database_id
        description: "Database ID of the position from the source system"
        tests:
          - not_null

      - name: place_database_id
        description: "Database ID of the place associated with the position"
        tests:
          - relationships:
              to: ref('stg_airbyte_source__ballotready_api_place')
              field: database_id

      - name: position_created_at
        description: "Timestamp when the position was created"

      - name: position_updated_at
        description: "Timestamp when the position was last updated"
    tests:
      - dbt_expectations.expect_compound_columns_to_be_unique:
          column_list: ["position_database_id", "place_database_id"]

  - name: int__enhanced_place
    description: "Intermediate model that enhances the place data from the BallotReady API"
    columns:
      - name: id
        description: "UUID of the place"
        tests:
          - not_null
          - unique
          - dbt_expectations.expect_column_values_to_match_regex:
              regex: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
      - name: br_database_id
        description: "Database ID of the place"
        tests:
          - not_null
          - unique
          - relationships:
              to: ref('stg_airbyte_source__ballotready_api_place')
              field: database_id

  - name: int__enhanced_place_w_parent
    description: "Intermediate model that enhances the place data from the BallotReady API with its parent place"
    columns:
      - name: id
        description: "UUID of the place"
        tests:
          - not_null
          - unique
          - dbt_expectations.expect_column_values_to_match_regex:
              regex: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
      - name: parent_id
        description: "UUID of the parent place"
        tests:
          - relationships:
              to: ref('int__enhanced_place')
              field: id
    tests:
      - dbt_utils.equal_rowcount:
          compare_model: ref('int__enhanced_place')

  - name: int__enhanced_position
    description: "Intermediate model that enhances the position data from the BallotReady API"
    columns:
      - name: id
        description: "UUID of the position"
        tests:
          - not_null
          - unique
          - dbt_expectations.expect_column_values_to_match_regex:
              regex: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
      - name: br_database_id
        description: "Database ID of the position"
        tests:
          - not_null
          - unique
          - relationships:
              to: ref('stg_airbyte_source__ballotready_api_position')
              field: database_id

  - name: int__enhanced_position_w_parent
    description: "Intermediate model that enhances the position data from the BallotReady API with its parent position"
    columns:
      - name: id
        description: "UUID of the position"
        tests:
          - not_null
          - unique
          - dbt_expectations.expect_column_values_to_match_regex:
              regex: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
      - name: parent_id
        description: "UUID of the parent position"
        tests:
          - relationships:
              to: ref('int__enhanced_position')
              field: id
    tests:
      - dbt_utils.equal_rowcount:
          compare_model: ref('int__enhanced_position')

  - name: int__enhanced_race
    description: "Intermediate model that enhances the race data from the BallotReady API"
    columns:
      - name: id
        description: "UUID of the race"
        tests:
          - not_null
          - unique
          - dbt_expectations.expect_column_values_to_match_regex:
              regex: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'
      - name: br_database_id
        description: "Database ID of the race"
        tests:
          - not_null
          - unique
          - relationships:
              to: ref('stg_airbyte_source__ballotready_api_race')
              field: database_id
    tests:
      - dbt_utils.equal_rowcount:
          compare_model: ref('stg_airbyte_source__ballotready_api_race')

  - name: int__race_to_positions
    description: "Intermediate model that maps races to positions from the BallotReady API"
    columns:
      - name: race_database_id
        description: "Database ID of the race"
        tests:
          - not_null
          - unique
          - relationships:
              to: ref('stg_airbyte_source__ballotready_api_race')
              field: database_id

  - name: int__place_fun_facts
    description: "Intermediate model that adds fun facts to places"
    columns:
      - name: database_id
        description: "Database ID of the place"
        tests:
          - not_null
          - unique
          - relationships:
              to: ref('stg_airbyte_source__ballotready_api_place')
              field: database_id
    tests:
      - dbt_utils.equal_rowcount:
          compare_model: ref('stg_airbyte_source__ballotready_api_place')

  - name: int__position_fun_facts
    description: "Intermediate model that adds fun facts to positions"
    columns:
      - name: database_id
        description: "Database ID of the position"
        tests:
          - not_null
          - unique
          - relationships:
              to: ref('stg_airbyte_source__ballotready_api_position')
              field: database_id

  - name: int__geo_id_attributes
    description: "Intermediate model that maps geo_id to its components and parent geo_id"
    columns:
      - name: geo_id
        description: "geo_id from BallotReady"
      - name: place_name_slug
        description: >-
          Constructed slug using Place.name on geo_id and concatenated with geo_id hierarchy.
          Uniqunes imposed by concatenating geo_id to the end of the slug if the
          Place.name is not unique

    tests:
      - dbt_expectations.expect_compound_columns_to_be_unique:
          column_list: ["geo_id", "mtfcc"]
      - dbt_expectations.expect_compound_columns_to_be_unique:
          column_list: ["geo_id", "mtfcc", "place_name_slug"]
